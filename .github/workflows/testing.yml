name: Velocity New Builds

on:
  push:
    tags: [ "*" ]
    branches: [ "test" ]
  pull_request:
    branches: [ "test" ]
#  schedule:
#    - cron: "0 * * * *"

permissions:
  contents: write

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Checkout build-state branch (if exists)
        id: checkout-state
        uses: actions/checkout@v5
        with:
          ref: build-state
          fetch-depth: 0
          persist-credentials: true
        continue-on-error: true

      - name: Create build-state branch (if missing)
        if: steps.checkout-state.outcome == 'failure'
        run: |
          git switch --orphan build-state
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git commit --allow-empty -m "Initialize empty branch"
          git push -u origin build-state

      - name: Checkout build-state branch (confirmed)
        if: steps.checkout-state.outcome == 'failure'
        uses: actions/checkout@v5
        with:
          ref: build-state
          fetch-depth: 0

      - name: Fetch new builds
        id: fetch
        run: |
          set -euo pipefail
          echo "Fetching builds from PaperMC API..."
          if ! curl -fsSL "https://fill.papermc.io/v3/projects/velocity/versions/${{ vars.PAPERMC_VELOCITY_VERSION }}/builds" -o builds.json; then
            echo "::error::Failed to fetch builds.json from PaperMC API."
            exit 1
          fi
          if ! jq empty builds.json 2>/dev/null; then
            echo "::error::Invalid JSON received from API."
            cat builds.json
            exit 1
          fi
          echo "Builds successfully fetched."
      - name: Determine new builds
        id: set-matrix
        run: |
          set -euo pipefail
      
          if [ ! -f builds.json ]; then
            echo "::error::Missing builds.json file. Previous step may have failed."
            exit 1
          fi
      
          echo "Extracting build IDs and download URLs..."
          # Получаем все id и url в формате JSON-объекта на строку
          jq -c '.[] | {id: .id, url: .downloads["server:default"].url}' builds.json > all_builds.txt
      
          touch .last_builds
          sort -u .last_builds -o .last_builds || true
      
          # Вычитаем уже обработанные id
          NEW_BUILDS_FILE=new_builds.txt
          > "$NEW_BUILDS_FILE"
          while read line; do
            ID=$(echo "$line" | jq -r '.id')
            if ! grep -qx "$ID" .last_builds; then
              echo "$line" >> "$NEW_BUILDS_FILE"
            fi
          done < all_builds.txt
      
          if [ ! -s "$NEW_BUILDS_FILE" ]; then
            echo "No new builds found."
            echo "matrix=[]" >> "$GITHUB_OUTPUT"
            exit 0
          fi
      
          echo "New builds detected:"
          cat "$NEW_BUILDS_FILE"
      
          # Собираем JSON-массив объектов для matrix
          MATRIX_JSON=$(jq -s '.' "$NEW_BUILDS_FILE")
          echo "matrix=$MATRIX_JSON" >> "$GITHUB_OUTPUT"
      
          # Добавляем новые id в .last_builds
          while read line; do
            echo "$line" | jq -r '.id' >> .last_builds
          done < "$NEW_BUILDS_FILE"
          sort -u .last_builds -o .last_builds        

      - name: Commit updated .last_builds
        if: steps.set-matrix.outputs.matrix != '[]'
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "Update last processed builds"
          branch: build-state
          file_pattern: .last_builds
          push_options: --force

      - name: Download release file
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          LATEST_TAG=$(gh release list --limit 1 --json tagName -q '.[0].tagName')
          echo "Latest release: $LATEST_TAG"

          # Скачиваем файл по паттерну velocity-*.jar
          gh release download "$LATEST_TAG" --pattern "*.jar" -D ./release/

      - name: Upload release file as artifact
        uses: actions/upload-artifact@v4
        with:
          name: release-jar
          path: ./release/*.jar

  process-build:
    needs: prepare
    runs-on: ubuntu-latest
    if: ${{ needs.prepare.outputs.matrix != '[]' }}
    strategy:
      matrix: ${{ fromJSON(needs.prepare.outputs.matrix) }}
    steps:
      - name: Download release artifact
        uses: actions/download-artifact@v5
        with:
          name: release-jar
          path: ./plugins

      - name: Download build jar
        run: |
          echo "Downloading build #${{ matrix.id }} with JAR from ${{ matrix.url }}"
          curl -fsSL "${{ matrix.url }}" -o ./velocity.jar

      - name: Setup Java
        uses: actions/setup-java@v5
        with:
          distribution: temurin
          java-version: 21

      - name: Launch velocity
        run: |
          echo 'eula=true' > eula.txt
          java -jar ./velocity.jar
