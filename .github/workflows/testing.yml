name: Velocity New Builds

on:
  push:
    tags: [ "*" ]
    branches: [ "test" ]
  pull_request:
    branches: [ "test" ]
#  schedule:
#    - cron: "0 * * * *"

permissions:
  contents: write

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Checkout build-state branch (or create if missing)
        id: checkout-state
        uses: actions/checkout@v4
        with:
          ref: build-state
          fetch-depth: 0
          persist-credentials: true
        continue-on-error: true
        
      - name: Ensure build-state branch exists
        if: steps.checkout-state.outcome == 'failure'
        run: |
          set -euo pipefail
          echo "build-state branch not found — creating it"
          git checkout -b build-state

          if ! git push -u origin build-state; then
            echo "::error::Failed to create or push build-state branch. Check permissions or token."
            exit 1
          fi
          echo "Successfully created and pushed build-state branch."

      - name: Fetch new builds
        id: fetch
        run: |
          set -euo pipefail
          echo "Fetching builds from PaperMC API..."
          if ! curl -fsSL "https://fill.papermc.io/v3/projects/velocity/versions/${{ vars.PAPERMC_VELOCITY_VERSION }}/builds" -o builds.json; then
            echo "::error::Failed to fetch builds.json from PaperMC API."
            exit 1
          fi
          if ! jq empty builds.json 2>/dev/null; then
            echo "::error::Invalid JSON received from API."
            cat builds.json
            exit 1
          fi
          echo "Builds successfully fetched."
      - name: Determine new builds
        id: set-matrix
        run: |
          set -euo pipefail

          if [ ! -f builds.json ]; then
            echo "::error::Missing builds.json file. Previous step may have failed."
            exit 1
          fi

          echo "Extracting build IDs..."
          if ! jq -r '.[].id' builds.json > all_ids.txt; then
            echo "::error::Failed to parse builds.json with jq."
            exit 1
          fi
          sort -u all_ids.txt -o all_ids.txt

          touch .last_builds
          sort -u .last_builds -o .last_builds

          NEW_IDS_FILE=new_ids.txt
          if ! comm -23 all_ids.txt .last_builds > "$NEW_IDS_FILE"; then
            echo "::error::Failed to compare build lists."
            exit 1
          fi

          if [ ! -s "$NEW_IDS_FILE" ]; then
            echo "No new builds found."
            echo "matrix=[]" >> "$GITHUB_OUTPUT"
            exit 0
          fi

          echo "New builds detected:"
          cat "$NEW_IDS_FILE"

          JSON=$(jq -R -s -c 'split("\n") | map(select(length>0))' < "$NEW_IDS_FILE") || {
            echo "::error::Failed to generate matrix JSON."
            exit 1
          }
          echo "matrix=$JSON" >> "$GITHUB_OUTPUT"

          cat "$NEW_IDS_FILE" >> .last_builds
          sort -u .last_builds -o .last_builds

          git add .last_builds

          if git diff --cached --quiet; then
            echo "No changes in .last_builds, skipping commit."
          else
            git commit -m "Update last processed builds"
            echo "Committing updated .last_builds..."
          fi

          if ! git push -u origin HEAD:build-state --force; then
            echo "::error::Failed to push updated .last_builds to build-state branch."
            exit 1
          fi

          echo "Successfully updated build-state branch."

      - name: Get latest release
        id: release
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          LATEST=$(gh release list --limit 1 --json tagName -q '.[0].tagName')
          echo "latest_release=$LATEST" >> $GITHUB_OUTPUT
          
          echo "Latest: $LATEST"

#  process-build:
#    needs: prepare
#    runs-on: ubuntu-latest
#    if: ${{ fromJSON(needs.prepare.outputs.build_matrix).include != '' }}
#    strategy:
#      matrix: ${{ fromJSON(needs.prepare.outputs.matrix).ids }}
#    steps:
#      - name: Checkout repository
#        uses: actions/checkout@v4
#
#      - name: Save build file
#        run: |
#          echo "Saving build ${{ matrix }} to file"
#          jq ".[] | select(.id == ${{ matrix }})" builds.json > build-${{ matrix }}.json
#
#      - name: Use latest release
#        run: |
#          echo "Latest release: ${{ needs.prepare.outputs.release_release }}"
#      
#      - name: Process build
#        run: |
#          echo "Processing build file build-${{ matrix }}.json"
#          cat build-${{ matrix }}.json
#          # Здесь можно скачать JAR, проверить SHA256 и т.д.
